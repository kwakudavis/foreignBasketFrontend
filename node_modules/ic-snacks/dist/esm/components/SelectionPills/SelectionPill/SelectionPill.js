import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import Radium from '@instacart/radium';
import PropTypes from 'prop-types';
import { themePropTypes } from '../../../styles/themer/utils';
import withTheme from '../../../styles/themer/withTheme';
import { getStyles } from './styles';

var NoOp = function NoOp() {}; // eslint-disable-line no-empty-function
// As of HTML5, id must consist of at least one character and no spaces


var textToID = function textToID(text) {
  return "selection_pill_" + text.split(' ').join('_');
};

var SelectionPill =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(SelectionPill, _React$PureComponent);

  function SelectionPill() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this.state = {
      isSelected: _this.props.isSelected,
      isFocused: false
    };

    _this.handleChange = function (event) {
      var onClick = _this.props.onClick;
      var isSelected = _this.state.isSelected;

      _this.setState({
        isSelected: !isSelected
      });

      onClick(event, _extends({}, _this.props, {
        isSelected: !isSelected
      }));
    };

    _this.toggleFocus = function () {
      var isFocused = _this.state.isFocused;

      _this.setState({
        isFocused: !isFocused
      });
    };

    _this.handleFocus = function (event) {
      _this.toggleFocus();

      _this.props.onFocus(event, _extends({}, _this.props, {
        isFocused: !_this.state.isFocused
      }));
    };

    _this.handleBlur = function (event) {
      _this.toggleFocus();

      _this.props.onBlur(event, _extends({}, _this.props, {
        isFocused: !_this.state.isFocused
      }));
    };

    return _this;
  }

  var _proto = SelectionPill.prototype;

  _proto.renderInputBtn = function renderInputBtn(_ref) {
    var selected = _ref.selected,
        inputId = _ref.inputId;
    var _this$props = this.props,
        aria = _this$props.aria,
        isDisabled = _this$props.isDisabled;
    var componentStyles = getStyles();
    return React.createElement("div", {
      style: componentStyles.checkBoxOverrideStyle
    }, React.createElement("input", {
      id: inputId,
      type: "checkbox",
      onChange: this.handleChange,
      checked: selected,
      disabled: isDisabled,
      "aria-label": aria.label,
      onBlur: this.handleBlur,
      onFocus: this.handleFocus
    }));
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        id = _this$props2.id,
        snacksTheme = _this$props2.snacksTheme,
        text = _this$props2.text,
        style = _this$props2.style,
        isDisabled = _this$props2.isDisabled,
        parentControlledState = _this$props2.parentControlledState;
    var isFocused = this.state.isFocused;
    var primaryForeground = snacksTheme.colors.primaryForeground;
    var inputId = id || textToID(text);
    var selected = parentControlledState ? this.props.isSelected : this.state.isSelected;
    var componentStyles = getStyles({
      isSelected: selected,
      isFocused: isFocused,
      isDisabled: isDisabled,
      primaryForeground: primaryForeground,
      externalStyles: style
    });
    return React.createElement("li", _extends({
      style: componentStyles.listElement
    }, this.props.listElementAttributes), this.renderInputBtn({
      selected: selected,
      inputId: inputId
    }), React.createElement("label", {
      htmlFor: inputId,
      style: componentStyles.labelButton
    }, text));
  };

  return SelectionPill;
}(React.PureComponent);

SelectionPill.propTypes = {
  /** Unique identifier for the pill. Default to text input if not provided. */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Any additional props to add to the list element (e.g. data attributes). */
  listElementAttributes: PropTypes.object,

  /** Any additional props to add to the checkbox element (e.g. data attributes). */
  elementAttributes: PropTypes.object,

  /** Flag determining if component selected state is controlled by parent through props or internal state */
  parentControlledState: PropTypes.bool,

  /** Determines wether or not selected styles are applied and start is a selected state */
  isSelected: PropTypes.bool,

  /** Determines Whether or not the pill is disabled. */
  isDisabled: PropTypes.bool,

  /** Callback function called after pill click
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   * @param {props} object All the props passed to the component
   */
  onClick: PropTypes.func,

  /** Callback function called after pill gained focus
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   * @param {props} object All the props passed to the component
   */
  onFocus: PropTypes.func,

  /** Callback function called after pill has lost focus
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   * @param {props} object All the props passed to the component
   */
  onBlur: PropTypes.func,

  /** Snacks theme attributes provided by Themer */
  snacksTheme: themePropTypes,

  /** Required text to appear inside pill */
  text: PropTypes.string.isRequired,

  /** Optional style overrides for button and its states */
  style: PropTypes.shape({
    button: PropTypes.object,
    disabledStyle: PropTypes.object,
    selectedStyle: PropTypes.object,
    focusedStyle: PropTypes.object
  }),

  /** Aria overrides for accessibility (i.e. use if label is not descriptive enough for screen readers) */
  aria: PropTypes.shape({
    label: PropTypes.string
  })
};
SelectionPill.defaultProps = {
  elementAttributes: {},
  isSelected: false,
  parentControlledState: false,
  onClick: NoOp,
  onFocus: NoOp,
  onBlur: NoOp,
  style: {},
  aria: {}
};
export default withTheme(Radium(SelectionPill));