import _extends from "@babel/runtime/helpers/esm/extends";
import colors from '../../../styles/colors';
import { setAlpha } from '../../../utils';
import spacing from '../../../styles/spacing';
import accessibility from '../../../utils/accessibility';
export var getStyles = function getStyles(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      _ref$isFocused = _ref.isFocused,
      isFocused = _ref$isFocused === void 0 ? false : _ref$isFocused,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      primaryForeground = _ref.primaryForeground,
      _ref$externalStyles = _ref.externalStyles,
      externalStyles = _ref$externalStyles === void 0 ? {} : _ref$externalStyles;

  var backgroundColor = setAlpha(primaryForeground, 0.1);
  return {
    listElement: {
      display: 'inline-block'
    },
    labelButton: _extends({
      display: 'block',
      fontWeight: 600,
      fontSize: 14,
      height: 32,
      lineHeight: '32px',
      borderRadius: 24,
      borderWidth: 1,
      borderStyle: 'solid',
      borderColor: colors.GRAY_88,
      color: primaryForeground,
      marginTop: 0,
      marginBottom: 0,
      marginLeft: '4px',
      marginRight: '4px'
    }, spacing.PADDING_X_SM, {
      transition: 'background-color 150ms ease-in-out',
      ':hover': {
        backgroundColor: backgroundColor
      }
    }, externalStyles.button, isFocused && _extends({
      outline: '5px auto rgb(59, 153, 252)',
      borderColor: primaryForeground
    }, externalStyles.focusedStyle), isDisabled && _extends({
      color: setAlpha(primaryForeground, 0.6),
      backgroundColor: colors.GRAY_97,
      ':hover': {
        backgroundColor: colors.GRAY_97
      }
    }, externalStyles.disabledStyle), isSelected && _extends({
      backgroundColor: backgroundColor,
      borderColor: primaryForeground,
      ':hover': {
        backgroundColor: setAlpha(primaryForeground, 0.3)
      }
    }, externalStyles.selectedStyle)),
    checkBoxOverrideStyle: accessibility.VISUALLY_HIDDEN
  };
};