import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import Radium from '@instacart/radium';
import PropTypes from 'prop-types';
import ScrollTrack from '../ScrollTrack/ScrollTrack';
import SelectionPill from './SelectionPill';
import { getStyles } from './styles';

var NoOp = function NoOp() {}; // eslint-disable-line no-empty-function


var SelectionPills =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(SelectionPills, _React$PureComponent);

  function SelectionPills() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this.state = {
      pillsList: _this.props.pills,
      selectedCount: _this.props.pills.filter(function (p) {
        return p.isSelected === true;
      }).length,
      allSelected: false // Initialize pills selected states

    };

    _this.labelId = function () {
      var label = _this.props.label;
      if (!label) return;
      return "selection_pills_label_" + label.split(' ').join('_');
    };

    _this.onSelectAll = function (e) {
      var _this$props = _this.props,
          selectAllLabel = _this$props.selectAllLabel,
          onSelectPill = _this$props.onSelectPill;
      var _this$state = _this.state,
          pillsList = _this$state.pillsList,
          allSelected = _this$state.allSelected;
      var selectedPill = {
        id: 'selectAllPill',
        isSelected: !allSelected,
        text: selectAllLabel
      };
      var newPillList = pillsList.map(function (p) {
        return _extends({}, p, {
          isSelected: false
        });
      });

      _this.setState({
        pillsList: newPillList,
        allSelected: !allSelected
      });

      onSelectPill(e, selectedPill, newPillList);
    };

    _this.onSelectPill = function (e, pill) {
      var _this$props2 = _this.props,
          onSelectPill = _this$props2.onSelectPill,
          pills = _this$props2.pills,
          parentControlledState = _this$props2.parentControlledState;

      var selectedPill = _extends({}, pill, {
        isSelected: !pill.isSelected
      });

      if (parentControlledState) {
        return onSelectPill(e, selectedPill, pills);
      }

      var _this$state2 = _this.state,
          pillsList = _this$state2.pillsList,
          selectedCount = _this$state2.selectedCount;
      var newPillList = pillsList.map(function (p) {
        if (p.id !== pill.id) {
          return p;
        }

        return selectedPill;
      });

      _this.setState({
        pillsList: newPillList,
        selectedCount: pill.isSelected ? selectedCount - 1 : selectedCount + 1,
        allSelected: false
      });

      onSelectPill(e, selectedPill, newPillList);
    };

    _this.isDisabledPill = function (pill) {
      var _this$props3 = _this.props,
          maxSelectionCount = _this$props3.maxSelectionCount,
          parentControlledState = _this$props3.parentControlledState;
      var selectedCount = _this.state.selectedCount;
      if (parentControlledState || pill.isSelected) return false;
      if (!selectedCount || !maxSelectionCount) return false;
      return selectedCount >= maxSelectionCount;
    };

    _this.renderSelectAllPill = function () {
      var _this$props4 = _this.props,
          maxSelectionCount = _this$props4.maxSelectionCount,
          includeSelectAll = _this$props4.includeSelectAll,
          selectAllLabel = _this$props4.selectAllLabel,
          parentControlledState = _this$props4.parentControlledState;
      var allSelected = _this.state.allSelected;
      if (maxSelectionCount || !includeSelectAll || parentControlledState) return;
      return React.createElement(SelectionPill, {
        onClick: function onClick(e) {
          return _this.onSelectAll(e);
        },
        isSelected: allSelected,
        text: selectAllLabel,
        aria: {
          label: selectAllLabel
        },
        key: "selectAllPill",
        id: "selectAllPill",
        parentControlledState: true
      });
    };

    _this.renderLabel = function () {
      var _this$props5 = _this.props,
          label = _this$props5.label,
          style = _this$props5.style;
      if (!label) return null;
      return React.createElement("span", {
        id: _this.labelId(),
        style: style.labelStyle
      }, label);
    };

    _this.renderPill = function (pill, idx) {
      var _this$props6 = _this.props,
          excludeScrollTrack = _this$props6.excludeScrollTrack,
          style = _this$props6.style;
      var componentStyles = getStyles({
        externalStyles: style,
        excludeScrollTrack: excludeScrollTrack
      });
      var pillId = pill.id || "selectionPill-" + pill.text + "-" + idx;
      return React.createElement(SelectionPill, _extends({
        isDisabled: _this.isDisabledPill(pill),
        onClick: function onClick(e) {
          return _this.onSelectPill(e, pill);
        },
        key: pillId,
        id: pillId,
        style: _extends({}, componentStyles.pillOverrideStyles, pill.style),
        parentControlledState: true
      }, pill));
    };

    return _this;
  }

  var _proto = SelectionPills.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.setState(function (prevState) {
      return {
        pillsList: prevState.pillsList.map(function (p) {
          return _extends({}, p, {
            isSelected: p.isSelected || false
          });
        })
      };
    });
  };

  _proto.render = function render() {
    var _this$props7 = this.props,
        listAttributes = _this$props7.listAttributes,
        elementAttributes = _this$props7.elementAttributes,
        excludeScrollTrack = _this$props7.excludeScrollTrack,
        parentControlledState = _this$props7.parentControlledState,
        style = _this$props7.style;
    var listToRender = parentControlledState ? this.props.pills : this.state.pillsList;
    var componentStyles = getStyles({
      externalStyles: style
    });
    var WrapperElement = excludeScrollTrack ? 'span' : ScrollTrack;
    return React.createElement(WrapperElement, null, React.createElement("div", _extends({
      style: componentStyles.wrapperStyles
    }, elementAttributes), this.renderLabel(), React.createElement("ul", _extends({
      style: componentStyles.pillsListStyles,
      "aria-labelledby": this.labelId()
    }, listAttributes), this.renderSelectAllPill(), listToRender.map(this.renderPill))));
  };

  return SelectionPills;
}(React.PureComponent);

SelectionPills.propTypes = {
  /** Callback function called after pill click
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   * @param {pill} object All pill attributes for pill selected
   * @param {pillList} object List of all pills
   */
  onSelectPill: PropTypes.func,

  /** Any additional props to add to the wrapper element (e.g. data attributes). */
  elementAttributes: PropTypes.object,

  /** Any additional props to add to the inner ul element (e.g. data attributes). */
  listAttributes: PropTypes.object,

  /** Flag determining if pills selected state is controlled by parent through props or internal state */
  parentControlledState: PropTypes.bool,

  /** Array of selectionPill attributes */
  pills: PropTypes.array,

  /** Optional label placed in front of pills */
  label: PropTypes.string,

  /** Option to only allow a maximum number of selected items. No restriction if not set. */
  maxSelectionCount: PropTypes.number,

  /** Option to include a generated pill that will toggle all other pills on / off. Disabled if a maxSelectionCount or parentControlledState. */
  includeSelectAll: PropTypes.bool,

  /** Option to exclude ScrollTrack wrapper and present pills in grid format wrapping within parent. */
  excludeScrollTrack: PropTypes.bool,

  /** Optional override of the select all pill label */
  selectAllLabel: PropTypes.string,

  /** Optional override styles */
  style: PropTypes.shape({
    wrapperStyle: PropTypes.object,
    listStyle: PropTypes.object,
    labelStyle: PropTypes.object
  })
};
SelectionPills.defaultProps = {
  elementAttributes: {},
  onSelectPill: NoOp,
  pills: [],
  maxSelectionCount: null,
  includeSelectAll: false,
  selectAllLabel: 'All',
  parentControlledState: false,
  excludeScrollTrack: false,
  style: {}
};
export default Radium(SelectionPills);