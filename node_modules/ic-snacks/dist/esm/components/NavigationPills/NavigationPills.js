import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import Radium from '@instacart/radium';
import NavigationPill from './NavigationPill';
import ScrollTrack from '../ScrollTrack/ScrollTrack';
import colors from '../../styles/colors';
import spacing from '../../styles/spacing';
var styles = {
  labelStyles: {
    margin: '0 10px 0 0',
    display: 'inline',
    fontSize: 'inherit'
  },
  wrapperStyles: _extends({
    display: 'inline-block',
    height: '56px',
    minWidth: '100%'
  }, spacing.PADDING_TOP_XS, spacing.PADDING_RIGHT_XS, spacing.PADDING_BOTTOM_XS, spacing.PADDING_LEFT_MD, {
    backgroundColor: colors.WHITE,
    boxSizing: 'border-box'
  }),
  pillsContainerStyles: {
    display: 'inline-block',
    marginTop: '0',
    marginRight: '0',
    marginBottom: '0',
    marginLeft: '0'
  }
};

var NavigationPills =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(NavigationPills, _React$Component);

  function NavigationPills() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = NavigationPills.prototype;

  _proto.render = function render() {
    var _this = this;

    var _this$props = this.props,
        label = _this$props.label,
        activePill = _this$props.activePill,
        onPillClick = _this$props.onPillClick,
        pills = _this$props.pills,
        elementAttributes = _this$props.elementAttributes,
        listItemAttributes = _this$props.listItemAttributes;

    var renderLabel = function renderLabel() {
      if (!label) {
        return;
      }

      var LabelElementType = _this.props.labelElementType;
      return React.createElement(LabelElementType, {
        style: styles.labelStyles
      }, label);
    };

    var renderPill = function renderPill(pill, idx) {
      return React.createElement(NavigationPill, {
        isActive: activePill === pill.text,
        onClick: function onClick(e) {
          return onPillClick(e, pill);
        },
        text: pill.text,
        key: "pill-" + idx,
        elementAttributes: pill.elementAttributes,
        anchorItemAttributes: pill.anchorItemAttributes
      });
    };

    var pillsContainerStyles = styles.pillsContainerStyles,
        wrapperStyles = styles.wrapperStyles;

    if (!pills || pills.length <= 1) {
      return null;
    }

    return React.createElement(ScrollTrack, null, React.createElement("div", _extends({
      style: wrapperStyles,
      ref: "pillsTrack"
    }, elementAttributes), renderLabel(), React.createElement("ul", _extends({
      style: pillsContainerStyles
    }, listItemAttributes), pills.map(renderPill))));
  };

  return NavigationPills;
}(React.Component);

NavigationPills.propTypes = {
  /** Any additonal props to add to the element (e.g. data attributes). */
  elementAttributes: PropTypes.object,

  /** Any additonal props to add to the inner ul element (e.g. data attributes). */
  listItemAttributes: PropTypes.object,

  /** array of pill objects */
  pills: PropTypes.array,

  /** Callback function called after pill click
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   * @param {props} object All the props passed to the component
   */
  onPillClick: PropTypes.func,

  /** optional label placed in front of pills */
  label: PropTypes.string,

  /** string matching the text of one of the pills. Determines which pill is active, if any */
  activePill: PropTypes.string,

  /** optional string for overriding the tag name of the label which appears in front of pills */
  labelElementType: PropTypes.string
};
NavigationPills.defaultProps = {
  elementAttributes: {},
  labelElementType: 'label'
};
export default Radium(NavigationPills);