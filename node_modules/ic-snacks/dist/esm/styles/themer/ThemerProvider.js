import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import { Themer } from './Themer';
import { ThemerContext } from './ThemerContext';
export var ThemerProvider =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ThemerProvider, _React$Component);

  function ThemerProvider() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      tick: 0
    };

    _this.onThemeChange = function () {
      var tick = _this.state.tick; // increment tick to force an update on the context

      _this.setState({
        tick: tick + 1
      });
    };

    return _this;
  }

  var _proto = ThemerProvider.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.unsubscribe = this.context.themer.subscribe(this.onThemeChange);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.unsubscribe();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        themer = _this$props.themer,
        children = _this$props.children; // this creates a new reference every time render gets called

    var themerContext = {
      themer: themer
    };
    return React.createElement(ThemerContext.Provider, {
      value: themerContext
    }, children);
  };

  return ThemerProvider;
}(React.Component);
ThemerProvider.propTypes = {
  themer: PropTypes.instanceOf(Themer),
  children: PropTypes.node
};
ThemerProvider.contextType = ThemerContext;
ThemerProvider.propTypes = {
  themer: PropTypes.object,
  children: PropTypes.node
};