import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
// Higher order component that force updates component on themer change
// and passes down theme through props
import React, { Component } from 'react';
import { isValidElementType } from 'react-is';
import PropTypes from 'prop-types';
import { ThemerContext } from './ThemerContext';
import { cleanConfig, themePropTypes } from './utils';

function withTheme(options) {
  if (options === void 0) {
    options = {};
  }

  // This allows us to maintain backwards compatibility with withTheme(Component)
  // while supporting withTheme(options)(Component)
  if (isValidElementType(options)) {
    return withTheme()(options);
  }

  return function wrapWithTheme(WrappedComponent) {
    var WithTheme =
    /*#__PURE__*/
    function (_Component) {
      _inheritsLoose(WithTheme, _Component);

      function WithTheme() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _Component.call.apply(_Component, [this].concat(args)) || this;

        _this.onThemeChange = function () {
          _this.forceUpdate();
        };

        return _this;
      }

      var _proto = WithTheme.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.unsubscribe = this.context.themer.subscribe(this.onThemeChange);
        this.validateSnacksTheme();
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.unsubscribe();
      };

      _proto.themeIsValid = function themeIsValid() {
        var snacksTheme = this.props.snacksTheme;
        return Boolean(snacksTheme) && typeof snacksTheme === 'object';
      };

      _proto.validateSnacksTheme = function validateSnacksTheme() {
        if (process.env.NODE_ENV !== 'production') {
          // eslint-disable-line no-undef
          var snacksTheme = this.props.snacksTheme;
          var themeIsBad = snacksTheme && !Object.keys(cleanConfig(snacksTheme)).length;

          if (themeIsBad) {
            throw new Error("Recieved an invalid snacksTheme Prop. Expected undefined or an object and instead got " + typeof snacksTheme);
          }
        }
      };

      _proto.render = function render() {
        var _this$props = this.props,
            snacksTheme = _this$props.snacksTheme,
            forwardedRef = _this$props.forwardedRef,
            rest = _objectWithoutPropertiesLoose(_this$props, ["snacksTheme", "forwardedRef"]);

        var theme = this.themeIsValid() ? snacksTheme : this.context.themer.themeConfig;
        return React.createElement(WrappedComponent, _extends({
          ref: forwardedRef,
          snacksTheme: theme
        }, rest));
      };

      return WithTheme;
    }(Component);

    WithTheme.displayName = "withTheme(" + (WrappedComponent.name || WrappedComponent.displayName || 'Component') + ")";
    WithTheme.propTypes = {
      forwardedRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.any
      })]),
      snacksTheme: themePropTypes
    };
    WithTheme.contextType = ThemerContext;

    if (options.forwardRef) {
      var withThemeForwardRef = function withThemeForwardRef(props, ref) {
        return React.createElement(WithTheme, _extends({}, props, {
          forwardedRef: ref
        }));
      }; // gives us ForwardRef(withTheme(ComponentName)) in dev tools and snapshots


      withThemeForwardRef.displayName = WithTheme.displayName;
      return React.forwardRef(withThemeForwardRef);
    }

    return WithTheme;
  };
}

export default withTheme;